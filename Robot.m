classdef Robot
    properties (Constant)
        wheelRadius = (1/2) * (195/1000)
        wheelAxis = (1/2) * (381/1000)
    end
    properties (Dependent)
        velocity
        angularVelocity
        inertialFrameVelocity
    end
    properties
        position = [0; 0; 0]
        positionHistory = []
        leftWheelAngularVelocity = deg2rad(30)
        rightWheelAngularVelocity = deg2rad(30)
    end
    methods
        function velocity = get.velocity(obj)
            velocity = obj.wheelRadius/2 * ( ...
                obj.rightWheelAngularVelocity + ...
                obj.leftWheelAngularVelocity ...
            );
        end
        function angularVelocity = get.angularVelocity(obj)
            angularVelocity = obj.wheelRadius/obj.wheelAxis * ( ...
                obj.rightWheelAngularVelocity - ...
                obj.leftWheelAngularVelocity ...
            );
        end
        function inertialFrameVelocity = get.inertialFrameVelocity(obj)
            theta = obj.position(3);
            inertialFrameVelocity = [
                cos(theta) 0
                sin(theta) 0
                0          1
            ] * [obj.velocity; obj.angularVelocity];
        end
        function obj = move(obj, timeSample)
            obj.position = ( ...
                obj.position + ...
                obj.inertialFrameVelocity * timeSample ...
            );
        end
        function obj = addPositionHistory(obj)
            obj.positionHistory = [obj.positionHistory, obj.position];
        end
        function plotRobot(obj)
            x = obj.position(1);
            y = obj.position(2);
            theta = obj.position(3);

            plot( ...
                obj.positionHistory(1,:), ...
                obj.positionHistory(2,:), ...
                'b', 'lineWidth', 2 ...
            );

            hold on;

            plot( ...
                x, y, ...
                'or', 'linewidth', 2, ...
                'markersize', 15 ...
            );

            plot( ...
                [x, x + 0.1*cos(theta)], ...
                [y, y + 0.1*sin(theta)], ...
                'r', 'linewidth', 2 ...
            );

            plot( ...
                [x, x + obj.wheelAxis/2*cos(theta + pi/2)], ...
                [y, y + obj.wheelAxis/2*sin(theta + pi/2)], ...
                'k', 'linewidth', 2 ...
            );

            plot( ...
                [x, x + obj.wheelAxis/2*cos(theta - pi/2)], ...
                [y, y + obj.wheelAxis/2*sin(theta - pi/2)], ...
                'k', 'linewidth', 2 ...
            );

            hold off;
            axis equal;
            xlabel('x [m]');
            ylabel('y [m]');
            grid on;
            drawnow
        end
    end
end